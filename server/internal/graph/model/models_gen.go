// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Capstone struct {
	ID          string `json:"id"`
	Slug        string `json:"slug"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Author      string `json:"author"`
	CreatedAt   int    `json:"createdAt"`
	UpdatedAt   int    `json:"updatedAt"`
	Semester    string `json:"semester"`
}

type CapstoneError struct {
	Error   string `json:"error"`
	Message string `json:"message"`
}

type CapstoneResponse struct {
	Capstone *Capstone      `json:"capstone"`
	Error    *CapstoneError `json:"error"`
}

type Login struct {
	UsernameOrEmail string `json:"usernameOrEmail"`
	Password        string `json:"password"`
}

type NewCapstone struct {
	Title       string `json:"title"`
	Description string `json:"description"`
	Author      string `json:"author"`
	Semester    string `json:"semester"`
}

type PaginatedCapstones struct {
	Capstones []*Capstone `json:"capstones"`
	HasMore   bool        `json:"hasMore"`
}

type PublicUser struct {
	Username string `json:"username"`
}

type Register struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type Todo struct {
	ID   int    `json:"id"`
	Text string `json:"text"`
	Done bool   `json:"done"`
	User *User  `json:"user"`
}

type User struct {
	ID        string `json:"id"`
	Username  string `json:"username"`
	Email     string `json:"email"`
	CreatedAt int    `json:"createdAt"`
	UpdatedAt int    `json:"updatedAt"`
	Role      Role   `json:"role"`
}

type UserError struct {
	Field   string `json:"field"`
	Message string `json:"message"`
}

type UserResponse struct {
	User  *User      `json:"user"`
	Error *UserError `json:"error"`
}

type Role string

const (
	RoleUser  Role = "USER"
	RoleAdmin Role = "ADMIN"
)

var AllRole = []Role{
	RoleUser,
	RoleAdmin,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleUser, RoleAdmin:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
